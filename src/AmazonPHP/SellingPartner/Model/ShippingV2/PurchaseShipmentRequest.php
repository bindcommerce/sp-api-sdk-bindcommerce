<?php

declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Model\ShippingV2;

use AmazonPHP\SellingPartner\Exception\AssertionException;
use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * Amazon Shipping API.
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 *
 * This class was auto-generated by https://openapi-generator.tech
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PurchaseShipmentRequest implements \ArrayAccess, \JsonSerializable, \Stringable, ModelInterface
{
    final public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'PurchaseShipmentRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'request_token' => 'string',
        'rate_id' => 'string',
        'requested_document_specification' => '\AmazonPHP\SellingPartner\Model\ShippingV2\RequestedDocumentSpecification',
        'requested_value_added_services' => '\AmazonPHP\SellingPartner\Model\ShippingV2\RequestedValueAddedService[]',
        'additional_inputs' => 'array<string,object>',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'request_token' => null,
        'rate_id' => null,
        'requested_document_specification' => null,
        'requested_value_added_services' => null,
        'additional_inputs' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'request_token' => 'requestToken',
        'rate_id' => 'rateId',
        'requested_document_specification' => 'requestedDocumentSpecification',
        'requested_value_added_services' => 'requestedValueAddedServices',
        'additional_inputs' => 'additionalInputs',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'request_token' => 'setRequestToken',
        'rate_id' => 'setRateId',
        'requested_document_specification' => 'setRequestedDocumentSpecification',
        'requested_value_added_services' => 'setRequestedValueAddedServices',
        'additional_inputs' => 'setAdditionalInputs',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'request_token' => 'getRequestToken',
        'rate_id' => 'getRateId',
        'requested_document_specification' => 'getRequestedDocumentSpecification',
        'requested_value_added_services' => 'getRequestedValueAddedServices',
        'additional_inputs' => 'getAdditionalInputs',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_token'] = $data['request_token'] ?? null;
        $this->container['rate_id'] = $data['rate_id'] ?? null;
        $this->container['requested_document_specification'] = $data['requested_document_specification'] ?? null;
        $this->container['requested_value_added_services'] = $data['requested_value_added_services'] ?? null;
        $this->container['additional_inputs'] = $data['additional_inputs'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if ($this->container['request_token'] === null) {
            throw new AssertionException("'request_token' can't be null");
        }

        if ($this->container['rate_id'] === null) {
            throw new AssertionException("'rate_id' can't be null");
        }

        if ($this->container['requested_document_specification'] === null) {
            throw new AssertionException("'requested_document_specification' can't be null");
        }

        $this->container['requested_document_specification']->validate();
    }

    /**
     * Gets request_token.
     */
    public function getRequestToken() : string
    {
        return $this->container['request_token'];
    }

    /**
     * Sets request_token.
     *
     * @param string $request_token a unique token generated to identify a getRates operation
     */
    public function setRequestToken(string $request_token) : self
    {
        $this->container['request_token'] = $request_token;

        return $this;
    }

    /**
     * Gets rate_id.
     */
    public function getRateId() : string
    {
        return $this->container['rate_id'];
    }

    /**
     * Sets rate_id.
     *
     * @param string $rate_id an identifier for the rate (shipment offering) provided by a shipping service provider
     */
    public function setRateId(string $rate_id) : self
    {
        $this->container['rate_id'] = $rate_id;

        return $this;
    }

    /**
     * Gets requested_document_specification.
     */
    public function getRequestedDocumentSpecification() : RequestedDocumentSpecification
    {
        return $this->container['requested_document_specification'];
    }

    /**
     * Sets requested_document_specification.
     *
     * @param RequestedDocumentSpecification $requested_document_specification requested_document_specification
     */
    public function setRequestedDocumentSpecification(RequestedDocumentSpecification $requested_document_specification) : self
    {
        $this->container['requested_document_specification'] = $requested_document_specification;

        return $this;
    }

    /**
     * Gets requested_value_added_services.
     *
     * @return null|\AmazonPHP\SellingPartner\Model\ShippingV2\RequestedValueAddedService[]
     */
    public function getRequestedValueAddedServices() : ?array
    {
        return $this->container['requested_value_added_services'];
    }

    /**
     * Sets requested_value_added_services.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\ShippingV2\RequestedValueAddedService[] $requested_value_added_services the value-added services to be added to a shipping service purchase
     */
    public function setRequestedValueAddedServices(?array $requested_value_added_services) : self
    {
        $this->container['requested_value_added_services'] = $requested_value_added_services;

        return $this;
    }

    /**
     * Gets additional_inputs.
     *
     * @return null|array<string,object>
     */
    public function getAdditionalInputs() : ?array
    {
        return $this->container['additional_inputs'];
    }

    /**
     * Sets additional_inputs.
     *
     * @param null|array<string,object> $additional_inputs The additional inputs required to purchase a shipping offering, in JSON format. The JSON provided here must adhere to the JSON schema that is returned in the response to the getAdditionalInputs operation.  Additional inputs are only required when indicated by the requiresAdditionalInputs property in the response to the getRates operation.
     */
    public function setAdditionalInputs(?array $additional_inputs) : self
    {
        $this->container['additional_inputs'] = $additional_inputs;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset) : mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
