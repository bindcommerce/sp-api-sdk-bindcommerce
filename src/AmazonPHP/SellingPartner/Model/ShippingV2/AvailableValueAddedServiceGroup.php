<?php

declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Model\ShippingV2;

use AmazonPHP\SellingPartner\Exception\AssertionException;
use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * Amazon Shipping API.
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 *
 * This class was auto-generated by https://openapi-generator.tech
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AvailableValueAddedServiceGroup implements \ArrayAccess, \JsonSerializable, \Stringable, ModelInterface
{
    final public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'AvailableValueAddedServiceGroup';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'group_id' => 'string',
        'group_description' => 'string',
        'is_required' => 'bool',
        'value_added_services' => '\AmazonPHP\SellingPartner\Model\ShippingV2\ValueAddedService[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'group_id' => null,
        'group_description' => null,
        'is_required' => null,
        'value_added_services' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'group_id' => 'groupId',
        'group_description' => 'groupDescription',
        'is_required' => 'isRequired',
        'value_added_services' => 'valueAddedServices',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'group_id' => 'setGroupId',
        'group_description' => 'setGroupDescription',
        'is_required' => 'setIsRequired',
        'value_added_services' => 'setValueAddedServices',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'group_id' => 'getGroupId',
        'group_description' => 'getGroupDescription',
        'is_required' => 'getIsRequired',
        'value_added_services' => 'getValueAddedServices',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_id'] = $data['group_id'] ?? null;
        $this->container['group_description'] = $data['group_description'] ?? null;
        $this->container['is_required'] = $data['is_required'] ?? null;
        $this->container['value_added_services'] = $data['value_added_services'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if ($this->container['group_id'] === null) {
            throw new AssertionException("'group_id' can't be null");
        }

        if ($this->container['group_description'] === null) {
            throw new AssertionException("'group_description' can't be null");
        }

        if ($this->container['is_required'] === null) {
            throw new AssertionException("'is_required' can't be null");
        }
    }

    /**
     * Gets group_id.
     */
    public function getGroupId() : string
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id.
     *
     * @param string $group_id the type of the value-added service group
     */
    public function setGroupId(string $group_id) : self
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets group_description.
     */
    public function getGroupDescription() : string
    {
        return $this->container['group_description'];
    }

    /**
     * Sets group_description.
     *
     * @param string $group_description the name of the value-added service group
     */
    public function setGroupDescription(string $group_description) : self
    {
        $this->container['group_description'] = $group_description;

        return $this;
    }

    /**
     * Gets is_required.
     */
    public function getIsRequired() : bool
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required.
     *
     * @param bool $is_required when true, one or more of the value-added services listed must be specified
     */
    public function setIsRequired(bool $is_required) : self
    {
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets value_added_services.
     *
     * @return null|\AmazonPHP\SellingPartner\Model\ShippingV2\ValueAddedService[]
     */
    public function getValueAddedServices() : ?array
    {
        return $this->container['value_added_services'];
    }

    /**
     * Sets value_added_services.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\ShippingV2\ValueAddedService[] $value_added_services a list of optional value-added services available for purchase with a shipping service offering
     */
    public function setValueAddedServices(?array $value_added_services) : self
    {
        $this->container['value_added_services'] = $value_added_services;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset) : mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
