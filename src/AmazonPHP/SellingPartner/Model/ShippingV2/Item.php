<?php

declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Model\ShippingV2;

use AmazonPHP\SellingPartner\Exception\AssertionException;
use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * Amazon Shipping API.
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 *
 * This class was auto-generated by https://openapi-generator.tech
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Item implements \ArrayAccess, \JsonSerializable, \Stringable, ModelInterface
{
    final public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'Item';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'item_value' => '\AmazonPHP\SellingPartner\Model\ShippingV2\Currency',
        'description' => 'string',
        'item_identifier' => 'string',
        'quantity' => 'int',
        'weight' => '\AmazonPHP\SellingPartner\Model\ShippingV2\Weight',
        'liquid_volume' => '\AmazonPHP\SellingPartner\Model\ShippingV2\LiquidVolume',
        'is_hazmat' => 'bool',
        'dangerous_goods_details' => '\AmazonPHP\SellingPartner\Model\ShippingV2\DangerousGoodsDetails',
        'product_type' => 'string',
        'invoice_details' => '\AmazonPHP\SellingPartner\Model\ShippingV2\InvoiceDetails',
        'serial_numbers' => 'string[]',
        'direct_fulfillment_item_identifiers' => '\AmazonPHP\SellingPartner\Model\ShippingV2\DirectFulfillmentItemIdentifiers',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'item_value' => null,
        'description' => null,
        'item_identifier' => null,
        'quantity' => null,
        'weight' => null,
        'liquid_volume' => null,
        'is_hazmat' => null,
        'dangerous_goods_details' => null,
        'product_type' => null,
        'invoice_details' => null,
        'serial_numbers' => null,
        'direct_fulfillment_item_identifiers' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'item_value' => 'itemValue',
        'description' => 'description',
        'item_identifier' => 'itemIdentifier',
        'quantity' => 'quantity',
        'weight' => 'weight',
        'liquid_volume' => 'liquidVolume',
        'is_hazmat' => 'isHazmat',
        'dangerous_goods_details' => 'dangerousGoodsDetails',
        'product_type' => 'productType',
        'invoice_details' => 'invoiceDetails',
        'serial_numbers' => 'serialNumbers',
        'direct_fulfillment_item_identifiers' => 'directFulfillmentItemIdentifiers',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'item_value' => 'setItemValue',
        'description' => 'setDescription',
        'item_identifier' => 'setItemIdentifier',
        'quantity' => 'setQuantity',
        'weight' => 'setWeight',
        'liquid_volume' => 'setLiquidVolume',
        'is_hazmat' => 'setIsHazmat',
        'dangerous_goods_details' => 'setDangerousGoodsDetails',
        'product_type' => 'setProductType',
        'invoice_details' => 'setInvoiceDetails',
        'serial_numbers' => 'setSerialNumbers',
        'direct_fulfillment_item_identifiers' => 'setDirectFulfillmentItemIdentifiers',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'item_value' => 'getItemValue',
        'description' => 'getDescription',
        'item_identifier' => 'getItemIdentifier',
        'quantity' => 'getQuantity',
        'weight' => 'getWeight',
        'liquid_volume' => 'getLiquidVolume',
        'is_hazmat' => 'getIsHazmat',
        'dangerous_goods_details' => 'getDangerousGoodsDetails',
        'product_type' => 'getProductType',
        'invoice_details' => 'getInvoiceDetails',
        'serial_numbers' => 'getSerialNumbers',
        'direct_fulfillment_item_identifiers' => 'getDirectFulfillmentItemIdentifiers',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_value'] = $data['item_value'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['item_identifier'] = $data['item_identifier'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['liquid_volume'] = $data['liquid_volume'] ?? null;
        $this->container['is_hazmat'] = $data['is_hazmat'] ?? null;
        $this->container['dangerous_goods_details'] = $data['dangerous_goods_details'] ?? null;
        $this->container['product_type'] = $data['product_type'] ?? null;
        $this->container['invoice_details'] = $data['invoice_details'] ?? null;
        $this->container['serial_numbers'] = $data['serial_numbers'] ?? null;
        $this->container['direct_fulfillment_item_identifiers'] = $data['direct_fulfillment_item_identifiers'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if ($this->container['item_value'] !== null) {
            $this->container['item_value']->validate();
        }

        if ($this->container['quantity'] === null) {
            throw new AssertionException("'quantity' can't be null");
        }

        if ($this->container['weight'] !== null) {
            $this->container['weight']->validate();
        }

        if ($this->container['liquid_volume'] !== null) {
            $this->container['liquid_volume']->validate();
        }

        if ($this->container['dangerous_goods_details'] !== null) {
            $this->container['dangerous_goods_details']->validate();
        }

        if ($this->container['invoice_details'] !== null) {
            $this->container['invoice_details']->validate();
        }

        if ($this->container['direct_fulfillment_item_identifiers'] !== null) {
            $this->container['direct_fulfillment_item_identifiers']->validate();
        }
    }

    /**
     * Gets item_value.
     */
    public function getItemValue() : ?Currency
    {
        return $this->container['item_value'];
    }

    /**
     * Sets item_value.
     *
     * @param null|Currency $item_value item_value
     */
    public function setItemValue(?Currency $item_value) : self
    {
        $this->container['item_value'] = $item_value;

        return $this;
    }

    /**
     * Gets description.
     */
    public function getDescription() : ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description.
     *
     * @param null|string $description the product description of the item
     */
    public function setDescription(?string $description) : self
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets item_identifier.
     */
    public function getItemIdentifier() : ?string
    {
        return $this->container['item_identifier'];
    }

    /**
     * Sets item_identifier.
     *
     * @param null|string $item_identifier a unique identifier for an item provided by the client
     */
    public function setItemIdentifier(?string $item_identifier) : self
    {
        $this->container['item_identifier'] = $item_identifier;

        return $this;
    }

    /**
     * Gets quantity.
     */
    public function getQuantity() : int
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity.
     *
     * @param int $quantity The number of units. This value is required.
     */
    public function setQuantity(int $quantity) : self
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets weight.
     */
    public function getWeight() : ?Weight
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight.
     *
     * @param null|Weight $weight weight
     */
    public function setWeight(?Weight $weight) : self
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets liquid_volume.
     */
    public function getLiquidVolume() : ?LiquidVolume
    {
        return $this->container['liquid_volume'];
    }

    /**
     * Sets liquid_volume.
     *
     * @param null|LiquidVolume $liquid_volume liquid_volume
     */
    public function setLiquidVolume(?LiquidVolume $liquid_volume) : self
    {
        $this->container['liquid_volume'] = $liquid_volume;

        return $this;
    }

    /**
     * Gets is_hazmat.
     */
    public function getIsHazmat() : ?bool
    {
        return $this->container['is_hazmat'];
    }

    /**
     * Sets is_hazmat.
     *
     * @param null|bool $is_hazmat When true, the item qualifies as hazardous materials (hazmat). Defaults to false.
     */
    public function setIsHazmat(?bool $is_hazmat) : self
    {
        $this->container['is_hazmat'] = $is_hazmat;

        return $this;
    }

    /**
     * Gets dangerous_goods_details.
     */
    public function getDangerousGoodsDetails() : ?DangerousGoodsDetails
    {
        return $this->container['dangerous_goods_details'];
    }

    /**
     * Sets dangerous_goods_details.
     *
     * @param null|DangerousGoodsDetails $dangerous_goods_details dangerous_goods_details
     */
    public function setDangerousGoodsDetails(?DangerousGoodsDetails $dangerous_goods_details) : self
    {
        $this->container['dangerous_goods_details'] = $dangerous_goods_details;

        return $this;
    }

    /**
     * Gets product_type.
     */
    public function getProductType() : ?string
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type.
     *
     * @param null|string $product_type the product type of the item
     */
    public function setProductType(?string $product_type) : self
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets invoice_details.
     */
    public function getInvoiceDetails() : ?InvoiceDetails
    {
        return $this->container['invoice_details'];
    }

    /**
     * Sets invoice_details.
     *
     * @param null|InvoiceDetails $invoice_details invoice_details
     */
    public function setInvoiceDetails(?InvoiceDetails $invoice_details) : self
    {
        $this->container['invoice_details'] = $invoice_details;

        return $this;
    }

    /**
     * Gets serial_numbers.
     *
     * @return null|string[]
     */
    public function getSerialNumbers() : ?array
    {
        return $this->container['serial_numbers'];
    }

    /**
     * Sets serial_numbers.
     *
     * @param null|string[] $serial_numbers A list of unique serial numbers in an Amazon package that can be used to guarantee non-fraudulent items. The number of serial numbers in the list must be less than or equal to the quantity of items being shipped. Only applicable when channel source is Amazon.
     */
    public function setSerialNumbers(?array $serial_numbers) : self
    {
        $this->container['serial_numbers'] = $serial_numbers;

        return $this;
    }

    /**
     * Gets direct_fulfillment_item_identifiers.
     */
    public function getDirectFulfillmentItemIdentifiers() : ?DirectFulfillmentItemIdentifiers
    {
        return $this->container['direct_fulfillment_item_identifiers'];
    }

    /**
     * Sets direct_fulfillment_item_identifiers.
     *
     * @param null|DirectFulfillmentItemIdentifiers $direct_fulfillment_item_identifiers direct_fulfillment_item_identifiers
     */
    public function setDirectFulfillmentItemIdentifiers(?DirectFulfillmentItemIdentifiers $direct_fulfillment_item_identifiers) : self
    {
        $this->container['direct_fulfillment_item_identifiers'] = $direct_fulfillment_item_identifiers;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset) : mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
