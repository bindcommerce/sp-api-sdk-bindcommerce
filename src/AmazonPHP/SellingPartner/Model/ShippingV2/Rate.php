<?php

declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Model\ShippingV2;

use AmazonPHP\SellingPartner\Exception\AssertionException;
use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * Amazon Shipping API.
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 *
 * This class was auto-generated by https://openapi-generator.tech
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Rate implements \ArrayAccess, \JsonSerializable, \Stringable, ModelInterface
{
    final public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'Rate';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'rate_id' => 'string',
        'carrier_id' => 'string',
        'carrier_name' => 'string',
        'service_id' => 'string',
        'service_name' => 'string',
        'billed_weight' => '\AmazonPHP\SellingPartner\Model\ShippingV2\Weight',
        'total_charge' => '\AmazonPHP\SellingPartner\Model\ShippingV2\Currency',
        'promise' => '\AmazonPHP\SellingPartner\Model\ShippingV2\Promise',
        'supported_document_specifications' => '\AmazonPHP\SellingPartner\Model\ShippingV2\SupportedDocumentSpecification[]',
        'available_value_added_service_groups' => '\AmazonPHP\SellingPartner\Model\ShippingV2\AvailableValueAddedServiceGroup[]',
        'requires_additional_inputs' => 'bool',
        'rate_item_list' => '\AmazonPHP\SellingPartner\Model\ShippingV2\RateItem[]',
        'payment_type' => '\AmazonPHP\SellingPartner\Model\ShippingV2\PaymentType',
        'benefits' => '\AmazonPHP\SellingPartner\Model\ShippingV2\Benefits',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'rate_id' => null,
        'carrier_id' => null,
        'carrier_name' => null,
        'service_id' => null,
        'service_name' => null,
        'billed_weight' => null,
        'total_charge' => null,
        'promise' => null,
        'supported_document_specifications' => null,
        'available_value_added_service_groups' => null,
        'requires_additional_inputs' => null,
        'rate_item_list' => null,
        'payment_type' => null,
        'benefits' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'rate_id' => 'rateId',
        'carrier_id' => 'carrierId',
        'carrier_name' => 'carrierName',
        'service_id' => 'serviceId',
        'service_name' => 'serviceName',
        'billed_weight' => 'billedWeight',
        'total_charge' => 'totalCharge',
        'promise' => 'promise',
        'supported_document_specifications' => 'supportedDocumentSpecifications',
        'available_value_added_service_groups' => 'availableValueAddedServiceGroups',
        'requires_additional_inputs' => 'requiresAdditionalInputs',
        'rate_item_list' => 'rateItemList',
        'payment_type' => 'paymentType',
        'benefits' => 'benefits',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'rate_id' => 'setRateId',
        'carrier_id' => 'setCarrierId',
        'carrier_name' => 'setCarrierName',
        'service_id' => 'setServiceId',
        'service_name' => 'setServiceName',
        'billed_weight' => 'setBilledWeight',
        'total_charge' => 'setTotalCharge',
        'promise' => 'setPromise',
        'supported_document_specifications' => 'setSupportedDocumentSpecifications',
        'available_value_added_service_groups' => 'setAvailableValueAddedServiceGroups',
        'requires_additional_inputs' => 'setRequiresAdditionalInputs',
        'rate_item_list' => 'setRateItemList',
        'payment_type' => 'setPaymentType',
        'benefits' => 'setBenefits',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'rate_id' => 'getRateId',
        'carrier_id' => 'getCarrierId',
        'carrier_name' => 'getCarrierName',
        'service_id' => 'getServiceId',
        'service_name' => 'getServiceName',
        'billed_weight' => 'getBilledWeight',
        'total_charge' => 'getTotalCharge',
        'promise' => 'getPromise',
        'supported_document_specifications' => 'getSupportedDocumentSpecifications',
        'available_value_added_service_groups' => 'getAvailableValueAddedServiceGroups',
        'requires_additional_inputs' => 'getRequiresAdditionalInputs',
        'rate_item_list' => 'getRateItemList',
        'payment_type' => 'getPaymentType',
        'benefits' => 'getBenefits',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rate_id'] = $data['rate_id'] ?? null;
        $this->container['carrier_id'] = $data['carrier_id'] ?? null;
        $this->container['carrier_name'] = $data['carrier_name'] ?? null;
        $this->container['service_id'] = $data['service_id'] ?? null;
        $this->container['service_name'] = $data['service_name'] ?? null;
        $this->container['billed_weight'] = $data['billed_weight'] ?? null;
        $this->container['total_charge'] = $data['total_charge'] ?? null;
        $this->container['promise'] = $data['promise'] ?? null;
        $this->container['supported_document_specifications'] = $data['supported_document_specifications'] ?? null;
        $this->container['available_value_added_service_groups'] = $data['available_value_added_service_groups'] ?? null;
        $this->container['requires_additional_inputs'] = $data['requires_additional_inputs'] ?? null;
        $this->container['rate_item_list'] = $data['rate_item_list'] ?? null;
        $this->container['payment_type'] = $data['payment_type'] ?? null;
        $this->container['benefits'] = $data['benefits'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if ($this->container['rate_id'] === null) {
            throw new AssertionException("'rate_id' can't be null");
        }

        if ($this->container['carrier_id'] === null) {
            throw new AssertionException("'carrier_id' can't be null");
        }

        if ($this->container['carrier_name'] === null) {
            throw new AssertionException("'carrier_name' can't be null");
        }

        if ($this->container['service_id'] === null) {
            throw new AssertionException("'service_id' can't be null");
        }

        if ($this->container['service_name'] === null) {
            throw new AssertionException("'service_name' can't be null");
        }

        if ($this->container['billed_weight'] !== null) {
            $this->container['billed_weight']->validate();
        }

        if ($this->container['total_charge'] === null) {
            throw new AssertionException("'total_charge' can't be null");
        }

        $this->container['total_charge']->validate();

        if ($this->container['promise'] === null) {
            throw new AssertionException("'promise' can't be null");
        }

        $this->container['promise']->validate();

        if ($this->container['supported_document_specifications'] === null) {
            throw new AssertionException("'supported_document_specifications' can't be null");
        }

        if ($this->container['requires_additional_inputs'] === null) {
            throw new AssertionException("'requires_additional_inputs' can't be null");
        }

        if ($this->container['benefits'] !== null) {
            $this->container['benefits']->validate();
        }
    }

    /**
     * Gets rate_id.
     */
    public function getRateId() : string
    {
        return $this->container['rate_id'];
    }

    /**
     * Sets rate_id.
     *
     * @param string $rate_id an identifier for the rate (shipment offering) provided by a shipping service provider
     */
    public function setRateId(string $rate_id) : self
    {
        $this->container['rate_id'] = $rate_id;

        return $this;
    }

    /**
     * Gets carrier_id.
     */
    public function getCarrierId() : string
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id.
     *
     * @param string $carrier_id the carrier identifier for the offering, provided by the carrier
     */
    public function setCarrierId(string $carrier_id) : self
    {
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets carrier_name.
     */
    public function getCarrierName() : string
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name.
     *
     * @param string $carrier_name the carrier name for the offering
     */
    public function setCarrierName(string $carrier_name) : self
    {
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets service_id.
     */
    public function getServiceId() : string
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id.
     *
     * @param string $service_id an identifier for the shipping service
     */
    public function setServiceId(string $service_id) : self
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets service_name.
     */
    public function getServiceName() : string
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name.
     *
     * @param string $service_name the name of the shipping service
     */
    public function setServiceName(string $service_name) : self
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets billed_weight.
     */
    public function getBilledWeight() : ?Weight
    {
        return $this->container['billed_weight'];
    }

    /**
     * Sets billed_weight.
     *
     * @param null|Weight $billed_weight billed_weight
     */
    public function setBilledWeight(?Weight $billed_weight) : self
    {
        $this->container['billed_weight'] = $billed_weight;

        return $this;
    }

    /**
     * Gets total_charge.
     */
    public function getTotalCharge() : Currency
    {
        return $this->container['total_charge'];
    }

    /**
     * Sets total_charge.
     *
     * @param Currency $total_charge total_charge
     */
    public function setTotalCharge(Currency $total_charge) : self
    {
        $this->container['total_charge'] = $total_charge;

        return $this;
    }

    /**
     * Gets promise.
     */
    public function getPromise() : Promise
    {
        return $this->container['promise'];
    }

    /**
     * Sets promise.
     *
     * @param Promise $promise promise
     */
    public function setPromise(Promise $promise) : self
    {
        $this->container['promise'] = $promise;

        return $this;
    }

    /**
     * Gets supported_document_specifications.
     *
     * @return \AmazonPHP\SellingPartner\Model\ShippingV2\SupportedDocumentSpecification[]
     */
    public function getSupportedDocumentSpecifications() : array
    {
        return $this->container['supported_document_specifications'];
    }

    /**
     * Sets supported_document_specifications.
     *
     * @param \AmazonPHP\SellingPartner\Model\ShippingV2\SupportedDocumentSpecification[] $supported_document_specifications a list of the document specifications supported for a shipment service offering
     */
    public function setSupportedDocumentSpecifications(array $supported_document_specifications) : self
    {
        $this->container['supported_document_specifications'] = $supported_document_specifications;

        return $this;
    }

    /**
     * Gets available_value_added_service_groups.
     *
     * @return null|\AmazonPHP\SellingPartner\Model\ShippingV2\AvailableValueAddedServiceGroup[]
     */
    public function getAvailableValueAddedServiceGroups() : ?array
    {
        return $this->container['available_value_added_service_groups'];
    }

    /**
     * Sets available_value_added_service_groups.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\ShippingV2\AvailableValueAddedServiceGroup[] $available_value_added_service_groups a list of value-added services available for a shipping service offering
     */
    public function setAvailableValueAddedServiceGroups(?array $available_value_added_service_groups) : self
    {
        $this->container['available_value_added_service_groups'] = $available_value_added_service_groups;

        return $this;
    }

    /**
     * Gets requires_additional_inputs.
     */
    public function getRequiresAdditionalInputs() : bool
    {
        return $this->container['requires_additional_inputs'];
    }

    /**
     * Sets requires_additional_inputs.
     *
     * @param bool $requires_additional_inputs When true, indicates that additional inputs are required to purchase this shipment service. You must then call the getAdditionalInputs operation to return the JSON schema to use when providing the additional inputs to the purchaseShipment operation.
     */
    public function setRequiresAdditionalInputs(bool $requires_additional_inputs) : self
    {
        $this->container['requires_additional_inputs'] = $requires_additional_inputs;

        return $this;
    }

    /**
     * Gets rate_item_list.
     *
     * @return null|\AmazonPHP\SellingPartner\Model\ShippingV2\RateItem[]
     */
    public function getRateItemList() : ?array
    {
        return $this->container['rate_item_list'];
    }

    /**
     * Sets rate_item_list.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\ShippingV2\RateItem[] $rate_item_list A list of RateItem
     */
    public function setRateItemList(?array $rate_item_list) : self
    {
        $this->container['rate_item_list'] = $rate_item_list;

        return $this;
    }

    /**
     * Gets payment_type.
     */
    public function getPaymentType() : ?PaymentType
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type.
     *
     * @param null|PaymentType $payment_type payment_type
     */
    public function setPaymentType(?PaymentType $payment_type) : self
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets benefits.
     */
    public function getBenefits() : ?Benefits
    {
        return $this->container['benefits'];
    }

    /**
     * Sets benefits.
     *
     * @param null|Benefits $benefits benefits
     */
    public function setBenefits(?Benefits $benefits) : self
    {
        $this->container['benefits'] = $benefits;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset) : mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
