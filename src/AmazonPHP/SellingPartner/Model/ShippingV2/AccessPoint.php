<?php

declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Model\ShippingV2;

use AmazonPHP\SellingPartner\Exception\AssertionException;
use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * Amazon Shipping API.
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 *
 * This class was auto-generated by https://openapi-generator.tech
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AccessPoint implements \ArrayAccess, \JsonSerializable, \Stringable, ModelInterface
{
    final public const DISCRIMINATOR = null;

    final public const ASSISTANCE_TYPE_STAFF_ASSISTED = 'STAFF_ASSISTED';

    final public const ASSISTANCE_TYPE_SELF_ASSISTED = 'SELF_ASSISTED';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'AccessPoint';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'access_point_id' => 'string',
        'name' => 'string',
        'timezone' => 'string',
        'type' => '\AmazonPHP\SellingPartner\Model\ShippingV2\AccessPointType',
        'accessibility_attributes' => '\AmazonPHP\SellingPartner\Model\ShippingV2\AccessibilityAttributes',
        'address' => '\AmazonPHP\SellingPartner\Model\ShippingV2\Address',
        'exception_operating_hours' => '\AmazonPHP\SellingPartner\Model\ShippingV2\ExceptionOperatingHours[]',
        'assistance_type' => 'string',
        'score' => 'string',
        'standard_operating_hours' => 'array<string,\AmazonPHP\SellingPartner\Model\ShippingV2\OperatingHours>',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'access_point_id' => null,
        'name' => null,
        'timezone' => null,
        'type' => null,
        'accessibility_attributes' => null,
        'address' => null,
        'exception_operating_hours' => null,
        'assistance_type' => null,
        'score' => null,
        'standard_operating_hours' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'access_point_id' => 'accessPointId',
        'name' => 'name',
        'timezone' => 'timezone',
        'type' => 'type',
        'accessibility_attributes' => 'accessibilityAttributes',
        'address' => 'address',
        'exception_operating_hours' => 'exceptionOperatingHours',
        'assistance_type' => 'assistanceType',
        'score' => 'score',
        'standard_operating_hours' => 'standardOperatingHours',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'access_point_id' => 'setAccessPointId',
        'name' => 'setName',
        'timezone' => 'setTimezone',
        'type' => 'setType',
        'accessibility_attributes' => 'setAccessibilityAttributes',
        'address' => 'setAddress',
        'exception_operating_hours' => 'setExceptionOperatingHours',
        'assistance_type' => 'setAssistanceType',
        'score' => 'setScore',
        'standard_operating_hours' => 'setStandardOperatingHours',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'access_point_id' => 'getAccessPointId',
        'name' => 'getName',
        'timezone' => 'getTimezone',
        'type' => 'getType',
        'accessibility_attributes' => 'getAccessibilityAttributes',
        'address' => 'getAddress',
        'exception_operating_hours' => 'getExceptionOperatingHours',
        'assistance_type' => 'getAssistanceType',
        'score' => 'getScore',
        'standard_operating_hours' => 'getStandardOperatingHours',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_point_id'] = $data['access_point_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['accessibility_attributes'] = $data['accessibility_attributes'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['exception_operating_hours'] = $data['exception_operating_hours'] ?? null;
        $this->container['assistance_type'] = $data['assistance_type'] ?? null;
        $this->container['score'] = $data['score'] ?? null;
        $this->container['standard_operating_hours'] = $data['standard_operating_hours'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getAssistanceTypeAllowableValues() : array
    {
        return [
            self::ASSISTANCE_TYPE_STAFF_ASSISTED,
            self::ASSISTANCE_TYPE_SELF_ASSISTED,
        ];
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if ($this->container['accessibility_attributes'] !== null) {
            $this->container['accessibility_attributes']->validate();
        }

        if ($this->container['address'] !== null) {
            $this->container['address']->validate();
        }

        $allowedValues = $this->getAssistanceTypeAllowableValues();

        if (null !== $this->container['assistance_type'] && !\in_array($this->container['assistance_type'], $allowedValues, true)) {
            throw new AssertionException(
                \sprintf(
                    "invalid value '%s' for 'assistance_type', must be one of '%s'",
                    $this->container['assistance_type'],
                    \implode("', '", $allowedValues)
                )
            );
        }
    }

    /**
     * Gets access_point_id.
     */
    public function getAccessPointId() : ?string
    {
        return $this->container['access_point_id'];
    }

    /**
     * Sets access_point_id.
     *
     * @param null|string $access_point_id Unique identifier for the access point
     */
    public function setAccessPointId(?string $access_point_id) : self
    {
        $this->container['access_point_id'] = $access_point_id;

        return $this;
    }

    /**
     * Gets name.
     */
    public function getName() : ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name.
     *
     * @param null|string $name Name of entity (store/hub etc) where this access point is located
     */
    public function setName(?string $name) : self
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets timezone.
     */
    public function getTimezone() : ?string
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone.
     *
     * @param null|string $timezone Timezone of access point
     */
    public function setTimezone(?string $timezone) : self
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets type.
     */
    public function getType() : ?AccessPointType
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param null|AccessPointType $type type
     */
    public function setType(?AccessPointType $type) : self
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets accessibility_attributes.
     */
    public function getAccessibilityAttributes() : ?AccessibilityAttributes
    {
        return $this->container['accessibility_attributes'];
    }

    /**
     * Sets accessibility_attributes.
     *
     * @param null|AccessibilityAttributes $accessibility_attributes accessibility_attributes
     */
    public function setAccessibilityAttributes(?AccessibilityAttributes $accessibility_attributes) : self
    {
        $this->container['accessibility_attributes'] = $accessibility_attributes;

        return $this;
    }

    /**
     * Gets address.
     */
    public function getAddress() : ?Address
    {
        return $this->container['address'];
    }

    /**
     * Sets address.
     *
     * @param null|Address $address address
     */
    public function setAddress(?Address $address) : self
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets exception_operating_hours.
     *
     * @return null|\AmazonPHP\SellingPartner\Model\ShippingV2\ExceptionOperatingHours[]
     */
    public function getExceptionOperatingHours() : ?array
    {
        return $this->container['exception_operating_hours'];
    }

    /**
     * Sets exception_operating_hours.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\ShippingV2\ExceptionOperatingHours[] $exception_operating_hours exception_operating_hours
     */
    public function setExceptionOperatingHours(?array $exception_operating_hours) : self
    {
        $this->container['exception_operating_hours'] = $exception_operating_hours;

        return $this;
    }

    /**
     * Gets assistance_type.
     */
    public function getAssistanceType() : ?string
    {
        return $this->container['assistance_type'];
    }

    /**
     * Sets assistance_type.
     *
     * @param null|string $assistance_type assistance_type
     */
    public function setAssistanceType(?string $assistance_type) : self
    {
        $this->container['assistance_type'] = $assistance_type;

        return $this;
    }

    /**
     * Gets score.
     */
    public function getScore() : ?string
    {
        return $this->container['score'];
    }

    /**
     * Sets score.
     *
     * @param null|string $score The score of access point, based on proximity to postal code and sorting preference. This can be used to sort access point results on shipper's end.
     */
    public function setScore(?string $score) : self
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets standard_operating_hours.
     *
     * @return null|array<string,\AmazonPHP\SellingPartner\Model\ShippingV2\OperatingHours>
     */
    public function getStandardOperatingHours() : ?array
    {
        return $this->container['standard_operating_hours'];
    }

    /**
     * Sets standard_operating_hours.
     *
     * @param null|array<string,\AmazonPHP\SellingPartner\Model\ShippingV2\OperatingHours> $standard_operating_hours Map of day of the week to operating hours of that day
     */
    public function setStandardOperatingHours(?array $standard_operating_hours) : self
    {
        $this->container['standard_operating_hours'] = $standard_operating_hours;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset) : mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
